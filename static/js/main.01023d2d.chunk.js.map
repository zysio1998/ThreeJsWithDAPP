{"version":3,"sources":["EthStuff.js","assets/Studios_Chain2.glb","WebGL.js","networks.js","reportWebVitals.js","index.js"],"names":["walletProvider","walletSigner","contract","biconomy","WebGL","canvas","document","querySelector","sizes","width","window","innerWidth","height","innerHeight","renderer","THREE","antialias","setSize","setPixelRatio","Math","min","devicePixelRatio","outputEncoding","gui","dat","hide","addEventListener","event","key","_hidden","show","datParameters","color","scene","dracoLoader","DRACOLoader","setDecoderPath","gltfLoader","GLTFLoader","setDRACOLoader","loadingManager","onStart","console","log","onLoad","onProgress","onError","textureLoader","cardColor","load","flipY","encoding","cardRough","cardMat","map","roughnessMap","pointLight1","intensity","position","z","y","x","add","pointLight2","mixer","maybe","gltf","children","find","child","name","material","scale","set","rotation","action","clipAction","animations","action2","action3","play","positions","Float32Array","particlesCount","i","random","objectsDistance","particlesGeometry","setAttribute","particlesMaterial","sizeAttenuation","size","particles","positions2","particlesCount2","objectsDistance2","particlesGeometry2","particlesMaterial2","particles2","camera","aspect","updateProjectionMatrix","controls","OrbitControls","enableDamping","scrollY","cursor","clientX","clientY","addColor","onChange","max","step","effectComposer","EffectComposer","renderPass","RenderPass","addPass","dotScreenPass","DotScreenPass","enabled","glitchPass","GlitchPass","goWild","strength","distortion_x","randX","rgbShiftPass","ShaderPass","RGBShiftShader","gammaCorrectionPass","GammaCorrectionShader","unrealBloomPass","UnrealBloomPass","radius","threshold","RenderTargetClass","getPixelRatio","capabilities","isWebGL2","folderEffects","addFolder","folderBloom","folderGlitch","clock","previousTime","tick","elapsedTime","getElapsedTime","deltaTime","parallaxX","parallaxY","update","render","requestAnimationFrame","getElementById","onclick","alert","Component","networks","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","selectedAddress","setSelectedAddress","loading","setloading","network","setNetwork","init","a","ethereum","isMetaMask","Biconomy","apiKey","debug","ethers","providers","Web3Provider","getSigner","getAddress","userAddress","onEvent","READY","Contract","myNft","abi","getSignerByAddress","utils","Interface","ERROR","error","message","checkIfWalletIsConnected","handleChainChanged","_chainId","location","reload","request","method","accounts","length","account","switchNetwork","chainId","on","connectWallet","params","code","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","askContractToMintNft","provider","getEthersProvider","populateTransaction","mintNFT","data","estimateGas","to","from","gasLimit","txParams","signatureType","send","tx","once","transaction","Swal","fire","title","html","transactionHash","padding","background","backdrop","icon","text","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.01023d2d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './EthStuff.css';\r\nimport { ethers } from \"ethers\"\r\nimport { Biconomy } from \"@biconomy/mexa\";\r\nimport myNft from \"./GaslessTransactions.json\"\r\nimport {networks} from \"./networks\"\r\nimport Swal from 'sweetalert2'\r\n\r\nconst CONTRACT_ADDRESS = \"0x4075998A0d15A8bA0BC5DD054753bB6E49967257\"; //mattic mainnet\r\n//const CONTRACT_ADDRESS = \"0x9CAb6adA8bb3cAac1d3da42454e57Dbd79762eAB\"; //kovan\r\n\r\n\r\nlet ethersProvider, walletProvider, walletSigner\r\nlet contract, contractInterface\r\nlet biconomy\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [selectedAddress, setSelectedAddress] = useState('')\r\n  const [loading, setloading] = useState(false);\r\n  const [network, setNetwork] = useState('')\r\n\r\n  const init = async () => {\r\n    if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {\r\n      // setInitLoading(0)\r\n\r\n      biconomy = new Biconomy(window.ethereum, {\r\n        apiKey: 'H8roWKFJL.afb8c826-9415-45f1-87c4-ae438cd0d422',\r\n        debug: true,\r\n      })\r\n      console.log(biconomy, \"checking\")\r\n\r\n      // two providers one with biconomy andd other for the wallet signing the transaction\r\n      ethersProvider = new ethers.providers.Web3Provider(biconomy)\r\n      walletProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n      walletSigner = walletProvider.getSigner()\r\n\r\n      let userAddress = await walletSigner.getAddress()\r\n      setSelectedAddress(userAddress)\r\n\r\n      // init dApp stuff like contracts and interface\r\n      biconomy\r\n        .onEvent(biconomy.READY, async () => {\r\n          contract = new ethers.Contract(\r\n            CONTRACT_ADDRESS,\r\n            myNft.abi,\r\n            biconomy.getSignerByAddress(userAddress)\r\n          )\r\n\r\n          contractInterface = new ethers.utils.Interface(myNft.abi)\r\n          setloading(false)\r\n          // setInitLoading(1)\r\n        })\r\n        .onEvent(biconomy.ERROR, (error, message) => {\r\n          console.log(message)\r\n          console.log(error)\r\n        })\r\n    } else {\r\n      console.log('Metamask not installed')\r\n    }\r\n  }\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)\r\n      switchNetwork()\r\n     \r\n      // setupEventListener()\r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n\r\n    // This is the new part, we check the user's network chain ID\r\n    const chainId = await ethereum.request({ method: 'eth_chainId' })\r\n    setNetwork(networks[chainId])\r\n\r\n    ethereum.on('chainChanged', handleChainChanged)\r\n\r\n    function handleChainChanged(_chainId) {\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      switchNetwork()\r\n      // setupEventListener()\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const switchNetwork = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Try to switch to the  testnet\r\n        await window.ethereum.request({\r\n          method: 'wallet_switchEthereumChain',\r\n          params: [{ chainId: '0x89' }], // Check networks.js for hexadecimal network ids\r\n        })\r\n      } catch (error) {\r\n        // This error code means that the chain we want has not been added to MetaMask\r\n        // In this case we ask the user to add it to their MetaMask\r\n        if (error.code === 4902) {\r\n          try {\r\n            await window.ethereum.request({\r\n              method: 'wallet_addEthereumChain',\r\n              params: [\r\n                {\r\n                  chainId: '0x89',\r\n                  chainName: 'Polygon Mainnet',\r\n                  rpcUrls: [\r\n                    'https://lrd7pqot5gbc.usemoralis.com:2053/server',\r\n                  ],\r\n                  nativeCurrency: {\r\n                    name: 'MATIC',\r\n                    symbol: 'MATIC',\r\n                    decimals: 18,\r\n                  },\r\n                  blockExplorerUrls: ['https://polygonscan.com/'],\r\n                },\r\n              ],\r\n            })\r\n          } catch (error) {\r\n            console.log(error)\r\n          }\r\n        }\r\n        console.log(error)\r\n      }\r\n    } else {\r\n      // If window.ethereum is not found then MetaMask is not installed\r\n      alert(\r\n        'MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html'\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  const askContractToMintNft = async () => {\r\n    try {\r\n      if(currentAccount !== ''){\r\n      setloading(true)\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        let userAddress = selectedAddress\r\n \r\n          \r\n          \r\n        console.log(biconomy)\r\n          let provider = biconomy.getEthersProvider();\r\n          let { data } = await contract.populateTransaction.mintNFT();\r\n          let gasLimit = await provider.estimateGas({\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            data: data\r\n          });\r\n          console.log(\"Gas limit : \", gasLimit);\r\n\r\n          let txParams = {\r\n            data: data,\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            gasLimit: 10000000,\r\n            signatureType: \"EIP712_SIGN\"\r\n          };\r\n          console.log(txParams)\r\n\r\n          let tx\r\n          try {\r\n            tx = await provider.send(\"eth_sendTransaction\", [txParams])\r\n          }\r\n          catch (err) {\r\n            console.log(\"handle errors like signature denied here\");\r\n            console.log(err);\r\n          }\r\n          console.log(\"Transaction hash : \", tx);\r\n          provider.once(tx, (transaction) => {\r\n            console.log(transaction, \"emited\");\r\n            setloading(false)\r\n            Swal.fire({\r\n              title: 'Minting successfull',\r\n              html:\r\n                'Hey there! we are minted successfully completed.' +\r\n                `<a href=' https://polygonscan.com/tx/${transaction.transactionHash}'>https://polygonscan.com/</a> ` +\r\n                '',\r\n              width: 600,\r\n              padding: '3em',\r\n              color: '#716add',\r\n              background: '#fff url(/images/trees.png)',\r\n              backdrop: `\r\n                rgba(0,0,123,0.4)\r\n                url(\"/images/nyan-cat.gif\")\r\n                left top\r\n                no-repeat\r\n              `\r\n            })\r\n          });\r\n\r\n          console.log(\"Going to pop wallet now to pay gas...\")\r\n          console.log(\"Mining...please wait.\")\r\n          \r\n       \r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    }else{\r\n      Swal.fire(\r\n        'Connect wallet',\r\n        'Befor mint connect with wallet',\r\n        'question'\r\n      )\r\n    }\r\n      \r\n    } catch (error) {\r\n      setloading(false)\r\n      if(error.data.message == \"execution reverted: Invalid Merkle Proof.\"){\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Minting Failed',\r\n        text: 'You are not in whitelist ',\r\n       \r\n      })\r\n      \r\n    }else if(error.data.message == \"execution reverted: Address already claimed\"){\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Minting Failed',\r\n        text: 'You are already claimed',\r\n       \r\n      })\r\n    }else{\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Minting Failed',\r\n        text: error.data.message,\r\n       \r\n      })\r\n\r\n    }\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    if(currentAccount !== ''){\r\n      setloading(true)\r\n    }\r\n\r\n    if (currentAccount !== '' && network === 'Polygon Mainnet') {\r\n      console.log('init')\r\n      init()\r\n    }\r\n  }, [currentAccount, network])\r\n\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n          :\r\n          \"\"}\r\n      <div className={loading ? \"container disabledbutton\" : \"container\"}>\r\n        \r\n          <div className=\"connect\">\r\n            {currentAccount === \"\" ? (\r\n              renderNotConnectedContainer()\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n       \r\n        <div className=\"container2\">\r\n          <div className=\"row body\">\r\n            <div className=\"col-md-6 tesboddy ff\">   \r\n              <div className=\" mint_div \">\r\n                <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\r\n                  Mint NFT\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6 ff\">\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","export default __webpack_public_path__ + \"static/media/Studios_Chain2.e79e8d7e.glb\";","import React, { Component} from \"react\";\r\nimport * as THREE from \"three\";\r\nimport * as dat from 'lil-gui'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\r\nimport { DotScreenPass } from 'three/examples/jsm/postprocessing/DotScreenPass.js'\r\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport { RGBShiftShader } from 'three/examples/jsm/shaders/RGBShiftShader.js'\r\nimport { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader.js'\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\r\n\r\nimport maybe from './assets/Studios_Chain2.glb'\r\n\r\n// Import CSS\r\nimport './WebGL.css';\r\n\r\nclass WebGL extends Component {\t\r\n\r\n\tcomponentDidMount() {\r\n\t\t\r\n\t\t// Canvas\r\n\t\tconst canvas = document.querySelector('canvas.webgl')\r\n\r\n\t\tconst sizes = {\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight\r\n\t\t}\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        RENDERER\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\t/**\r\n\t\t * Renderer\r\n\t\t */\r\n\t\t const renderer = new THREE.WebGLRenderer({\r\n\t\t\tcanvas: canvas,\r\n\t\t\tantialias: true\r\n\t\t})\r\n\t\trenderer.setSize(sizes.width, sizes.height)\r\n\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\t\trenderer.outputEncoding = THREE.sRGBEncoding\r\n\r\n\t\tconst gui = new dat.GUI({\r\n\t\t\twidth: 400\r\n\t\t})\r\n\t\tgui.hide()\r\n\t\twindow.addEventListener('keydown', (event) =>\r\n\t\t{\r\n\t\t\tif(event.key === 'h')\r\n\t\t\t{\r\n\t\t\t\t\tif(gui._hidden)\r\n\t\t\t\t\t\tgui.show()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tgui.hide()\r\n\t\t\t\t}\r\n\t\t})\r\n\t\t\r\n\t\tconst datParameters = {\r\n\t\t\tcolor: 0xbf4808\r\n\t\t}\r\n\t\t\r\n\t\t// Scene\r\n\t\tconst scene = new THREE.Scene()\r\n\t\t\r\n\t\t/**\r\n\t\t * Loaders\r\n\t\t */\r\n\t\t\r\n\t\t// Draco loader\r\n\t\tconst dracoLoader = new DRACOLoader()\r\n\t\tdracoLoader.setDecoderPath('./static/draco/')\r\n\t\t\r\n\t\t// GLTF loader\r\n\t\tconst gltfLoader = new GLTFLoader()\r\n\t\tgltfLoader.setDRACOLoader(dracoLoader)\r\n\t\t\r\n\t\t//Loading Manager\r\n\t\tconst loadingManager = new THREE.LoadingManager()\r\n\t\tloadingManager.onStart = () =>\r\n\t\t{\r\n\t\t\tconsole.log('onStart')\r\n\t\t}\r\n\t\tloadingManager.onLoad = () =>\r\n\t\t{\r\n\t\t\tconsole.log('onLoad')\r\n\t\t}\r\n\t\tloadingManager.onProgress = () =>\r\n\t\t{\r\n\t\t\tconsole.log('onProgress')\r\n\t\t}\r\n\t\tloadingManager.onError = () =>\r\n\t\t{\r\n\t\t\tconsole.log('onError')\r\n\t\t}\r\n\t\t\r\n\t\t// Texture loader\r\n\t\tconst textureLoader = new THREE.TextureLoader(loadingManager)\r\n\t\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        TEXTURES & MATS\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\t//Materials\t\t\r\n\t\tconst cardColor = textureLoader.load('./static/Materials/Card Combine 2.png')\r\n\t\tcardColor.flipY = false\r\n\t\tcardColor.encoding = THREE.sRGBEncoding\r\n\t\tconst cardRough = textureLoader.load('./static/Materials/Card Combine 2.png')\r\n\t\tcardRough.flipY = false\r\n\t\tcardRough.encoding = THREE.sRGBEncoding\r\n\t\tconst cardMat = new THREE.MeshBasicMaterial({ map: cardColor })\t\t\r\n\t\tcardMat.map = cardColor\r\n\t\tcardMat.roughnessMap = cardColor\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        LIGHTING\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t// // Ambient\r\n\t\tconst pointLight1 = new THREE.PointLight()\r\n\t\tpointLight1.color = new THREE.Color(0xffffff)\r\n\t\tpointLight1.intensity = .5\r\n\t\tpointLight1.position.z = - 8\r\n\t\tpointLight1.position.y = 8\r\n\t\tpointLight1.position.x = - 8\r\n\t\tscene.add(pointLight1)\t\t\r\n\t\tconst pointLight2 = new THREE.PointLight()\r\n\t\tpointLight2.color = new THREE.Color(0xffffff)\r\n\t\tpointLight2.intensity = 1\r\n\t\tpointLight2.position.z = - 2\r\n\t\tpointLight2.position.y = 2\r\n\t\tpointLight2.position.x = - 2\r\n\t\tscene.add(pointLight2)\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        COMPONENTS\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\t\t/**\r\n\t\t * Model\r\n\t\t */\r\n\t\t\r\n\t\t let mixer = null\r\n\t\t \r\n\t\t\r\n\t\t gltfLoader.load(maybe,\r\n\t\t\t(gltf) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.log(gltf.scene)\r\n\t\t\t\tconst cardMesh = gltf.scene.children.find(child => child => child.name === 'card')\t\t\t\t\r\n\t\t\t\tcardMesh.material = cardMat\t\r\n\t\t\t\tgltf.scene.scale.set(1, 1, 1)\r\n\t\t\t\tgltf.scene.rotation.set(-0, 0, 0)\r\n\t\t\t\tscene.add(gltf.scene)\r\n\t\t\t\tmixer = new THREE.AnimationMixer(gltf.scene)\r\n\t\t\t\tconst action = mixer.clipAction(gltf.animations[0])\r\n\t\t\t\tconst action2 = mixer.clipAction(gltf.animations[1])\r\n\t\t\t\tconst action3 = mixer.clipAction(gltf.animations[2])\r\n\t\t\t\taction.play()\r\n\t\t\t\taction2.play()\r\n\t\t\t\taction3.play()\r\n\t\t\t}\r\n\t\t)\t\t\r\n\t\t/**\r\n\t\t * Particles\r\n\t\t */\r\n\t\t// Geometry\r\n\t\tconst objectsDistance = 20\r\n\t\tconst particlesCount = 2000\t\t\r\n\t\tconst positions = new Float32Array(particlesCount * 3)\r\n\t\t\r\n\t\tfor(let i = 0; i < particlesCount; i++)\r\n\t\t{\r\n\t\t\tpositions[i * 3 + 0] = (Math.random() - 0.5) * 100\r\n\t\t\tpositions[i * 3 + 1] = objectsDistance * 0.5 - Math.random() * objectsDistance \r\n\t\t\tpositions[i * 3 + 2] = (Math.random() - 0.5) * 100\r\n\t\t}\r\n\t\t\r\n\t\tconst particlesGeometry = new THREE.BufferGeometry()\r\n\t\tparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\r\n\t\t\r\n\t\t// Material\r\n\t\tconst particlesMaterial = new THREE.PointsMaterial({\r\n\t\t\tcolor: 0xfcfe86,\r\n\t\t\tsizeAttenuation: textureLoader,\r\n\t\t\tsize: 0.03\r\n\t\t})\r\n\t\t\r\n\t\t// Points\r\n\t\tconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\r\n\t\tscene.add(particles)\r\n\t\tconst objectsDistance2 = 120\r\n\t\tconst particlesCount2 = 400\t\t\r\n\t\tconst positions2 = new Float32Array(particlesCount2 * 3)\r\n\t\t\r\n\t\tfor(let i = 0; i < particlesCount2; i++)\r\n\t\t{\r\n\t\t\tpositions2[i * 3 + 0] = (Math.random() - 0.5) * 50\r\n\t\t\tpositions2[i * 3 + 1] = objectsDistance2 * 0.5 - Math.random() * objectsDistance2 \r\n\t\t\tpositions2[i * 3 + 2] = (Math.random() - 0.5) * 25\r\n\t\t}\r\n\t\t\r\n\t\tconst particlesGeometry2 = new THREE.BufferGeometry()\r\n\t\tparticlesGeometry2.setAttribute('position', new THREE.BufferAttribute(positions2, 3))\r\n\t\t\r\n\t\t// Material\r\n\t\tconst particlesMaterial2 = new THREE.PointsMaterial({\r\n\t\t\tcolor: 0xfcfe86,\r\n\t\t\tsizeAttenuation: textureLoader,\r\n\t\t\tsize: 0.03\r\n\t\t})\r\n\t\t\r\n\t\tconst particles2 = new THREE.Points(particlesGeometry2, particlesMaterial2)\r\n\t\tscene.add(particles2)\r\n\t\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        SIZES & RESIZE\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t/**\r\n\t\t * Sizes\r\n\t\t */\r\n\t\t\r\n\t\t\r\n\t\twindow.addEventListener('resize', () =>\r\n\t\t{\r\n\t\t\t// Update sizes\r\n\t\t\tsizes.width = window.innerWidth\r\n\t\t\tsizes.height = window.innerHeight\r\n\t\t\r\n\t\t\t// Update camera\r\n\t\t\tcamera.aspect = sizes.width / sizes.height\r\n\t\t\tcamera.updateProjectionMatrix()\r\n\t\t\r\n\t\t\t// Update renderer\r\n\t\t\trenderer.setSize(sizes.width, sizes.height)\r\n\t\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\t\t})\r\n\t\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        CAMERA & CONTROLS\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\t/**\r\n\t\t * Camera\r\n\t\t */\r\n\t\t// Base camera\r\n\t\tconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 100)\r\n\t\tcamera.position.x = 0\r\n\t\tcamera.position.y = 1\r\n\t\tcamera.position.z = 5\r\n\t\tscene.add(camera)\r\n\t\t\r\n\t\t// Controls\r\n\t\t\r\n\t\tconst controls = new OrbitControls(camera, canvas)\r\n\t\tcontrols.enableDamping = true\r\n\t\t\r\n\t\t//Scroll and Cursor\r\n\t\t\r\n\t\tlet scrollY = window.scrollY\r\n\t\tlet currentSection = 0\r\n\t\t\r\n\t\twindow.addEventListener('scroll', () =>\r\n\t\t{\r\n\t\t\tscrollY = window.scrollY\r\n\t\t\r\n\t\t\r\n\t\t})\r\n\t\t\r\n\t\tconst cursor = {}\r\n\t\tcursor.x = 0\r\n\t\tcursor.y = 0\r\n\t\t\r\n\t\twindow.addEventListener('mousemove', (event) =>\r\n\t\t{\r\n\t\t\tcursor.x = event.clientX / sizes.width - 0.5\r\n\t\t\tcursor.y = event.clientY / sizes.height - 0.5\r\n\t\t})\r\n\t\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        DAT.GUI\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\tgui.addColor(datParameters, 'color').name('Particle Color')\r\n\t\t\t.onChange(() =>\r\n\t\t\t{\r\n\t\t\t\tparticlesMaterial.color.set(datParameters.color)\r\n\t\t\t})\r\n\t\t\r\n\t\tgui.add(particlesMaterial, 'size').min(0).max(1).step(0.01).name('Particle Size')\r\n\t\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        Post Processing\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Post processing\r\n\t\t */\r\n\t\t const effectComposer = new EffectComposer(renderer)\r\n\t\t effectComposer.setSize(sizes.width, sizes.height)\r\n\t\t effectComposer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\r\n\t\t\r\n\t\t \r\n\t\tconst renderPass = new RenderPass(scene, camera)\r\n\t\teffectComposer.addPass(renderPass)\r\n\t\t\r\n\t\t//----------\r\n\t\t\r\n\t\tconst dotScreenPass = new DotScreenPass()\r\n\t\tdotScreenPass.enabled = false\r\n\t\teffectComposer.addPass(dotScreenPass)\r\n\t\t\r\n\t\tconst glitchPass = new GlitchPass()\r\n\t\tglitchPass.goWild = false\r\n\t\tglitchPass.enabled = false\r\n\t\tglitchPass.strength = 0.3\r\n\t\tglitchPass.scale = 1\r\n\t\tglitchPass.distortion_x = 1\r\n\t\tglitchPass.randX = 1\r\n\t\teffectComposer.addPass(glitchPass)\r\n\t\t\r\n\t\tconst rgbShiftPass = new ShaderPass(RGBShiftShader)\r\n\t\trgbShiftPass.enabled = false\r\n\t\trgbShiftPass.scale = 2\r\n\t\teffectComposer.addPass(rgbShiftPass)\r\n\t\t\r\n\t\tconst gammaCorrectionPass = new ShaderPass(GammaCorrectionShader)\r\n\t\tgammaCorrectionPass.enabled = false\r\n\t\teffectComposer.addPass(gammaCorrectionPass)\r\n\t\t\r\n\t\tconst unrealBloomPass = new UnrealBloomPass()\r\n\t\tunrealBloomPass.strength = 0.54\r\n\t\tunrealBloomPass.radius = .22\r\n\t\tunrealBloomPass.threshold = 0.88\r\n\t\tunrealBloomPass.enabled = true\r\n\t\teffectComposer.addPass(unrealBloomPass)\r\n\t\t\r\n\t\t//anti aliasing\r\n\t\t\r\n\t\tlet RenderTargetClass = null\r\n\t\t\r\n\t\tif(renderer.getPixelRatio() === 1 && renderer.capabilities.isWebGL2)\r\n\t\t{\r\n\t\t\tRenderTargetClass = THREE.WebGLMultisampleRenderTarget\r\n\t\t\tconsole.log('Using WebGLMultisampleRenderTarget')\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tRenderTargetClass = THREE.WebGLRenderTarget\r\n\t\t\tconsole.log('Using WebGLRenderTarget')\r\n\t\t}\r\n\t\t\r\n\t\tconst renderTarget = new RenderTargetClass(\r\n\t\t\t// ...\r\n\t\t)\r\n\t\tif(renderer.getPixelRatio() === 1 && !renderer.capabilities.isWebGL2)\r\n\t\t{\r\n\t\t\t//const smaaPass = new SMAAPass()\r\n\t\t\t//effectComposer.addPass(smaaPass)\r\n\t\t\r\n\t\t\tconsole.log('Using SMAA')\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        Effects GUI\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\tconst folderEffects = gui.addFolder('Post Prod Effects');\r\n\t\tconst folderBloom = folderEffects.addFolder('Bloom');\r\n\t\tfolderBloom.add(unrealBloomPass, 'enabled')\r\n\t\tfolderBloom.add(unrealBloomPass, 'strength').min(0).max(1).step(0.01).name('Bloom Strength')\r\n\t\tfolderBloom.add(unrealBloomPass, 'radius').min(0).max(1).step(0.01).name('Bloom Radius')\r\n\t\tfolderBloom.add(unrealBloomPass, 'threshold').min(0).max(1).step(0.01).name('Bloom threshold')\r\n\t\t\r\n\t\tconst folderGlitch = folderEffects.addFolder('Glitch');\r\n\t\tfolderGlitch.add(glitchPass, 'enabled').name('Enable')\r\n\t\tfolderGlitch.add(glitchPass, 'strength').min(0).max(12).step(0.01).name(' Strength')\r\n\t\tfolderGlitch.add(glitchPass, 'distortion_x').min(0).max(12).step(0.01).name(' distortion_x')\r\n\t\tfolderGlitch.add(glitchPass, 'randX').min(0).max(99).step(0.01).name('Glitch Time Displace')\r\n\t\tfolderGlitch.add(glitchPass, 'scale').min(0).max(12).step(0.01).name('Glitch Time Displace')\r\n\t\t\r\n\t\tconst folderRGB = folderEffects.addFolder('RGB Shift');\r\n\t\tfolderRGB.add(rgbShiftPass, 'enabled').name('Enable')\r\n\t\t\r\n\t\tconst folderDot = folderEffects.addFolder('Dot Screen');\r\n\t\tfolderDot.add(dotScreenPass, 'enabled').name('Enable')\r\n\t\t\r\n\t\tconst folderGamma = folderEffects.addFolder('Gamma Correction');\r\n\t\tfolderGamma.add(gammaCorrectionPass, 'enabled').name('Enable')\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t//**                                        ANIMATE\r\n\t\t//------------------------------------------------------------------------------------------------\r\n\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * Animate\r\n\t\t */\r\n\t\tconst clock = new THREE.Clock()\r\n\t\tlet previousTime = 0\r\n\t\t\r\n\t\tconst tick = () =>\r\n\t\t{\r\n\t\t\tconst elapsedTime = clock.getElapsedTime()\r\n\t\t\tconst deltaTime = elapsedTime - previousTime\r\n\t\t\tpreviousTime = elapsedTime\r\n\t\t\r\n\t\t\t//** -------------------------        Update controls       ---------------------------- **// \r\n\t\t\t//**             Animate Camera on Mouse move Parralax\r\n\t\t\tconst parallaxX = cursor.x * 0.5\r\n\t\t\tconst parallaxY = - cursor.y * 0.5\r\n\t\t\tcamera.position.x += (parallaxX ) * 1 * deltaTime   \r\n\t\t\tcamera.position.y += (parallaxY ) * 1 * deltaTime\r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t\t\t  //**              Update Controls for Orbital                      */\r\n\t\t\t  controls.update()\r\n\t\t\t  \r\n\t\t\t  //**              Update Mixer GLTF Animation                      */\r\n\t\t\t  if(mixer)\r\n\t\t\t{\r\n\t\t\t\tmixer.update(deltaTime)\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t// Render\r\n\t\t\trenderer.render(scene, camera)\r\n\t\t\r\n\t\t\t//effects Render\r\n\t\t\teffectComposer.render()\r\n\t\t\r\n\t\t\t// Call tick again on the next frame\r\n\t\t\twindow.requestAnimationFrame(tick)\r\n\t\t}\r\n\t\t\r\n\t\ttick()\r\n\r\n\r\n\r\n\t\t//Trying to add DAPP\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\tdocument.getElementById(\"hamster\").onclick = function () { alert('hello!'); };\r\n\r\n\t\t\r\n\r\n\t\t\r\n\r\n\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\t\r\n\r\n\t\r\n\r\n\r\n\t\r\n\r\n\r\n\trender() {\t  \r\n\t  return (\r\n\t\t/*<div className=\"App\">\r\n\t\t\t\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\t  \r\n\t\t</div>*/\r\n\t\t<div></div>\r\n\t\t\r\n\t  );\r\n\t\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default WebGL;\r\n","const networks = {\r\n    '0x1': 'Mainnet',\r\n    '0x3': 'Ropsten',\r\n    '0x2a': 'Kovan',\r\n    '0x4': 'Rinkeby',\r\n    '0x5': 'Goerli',\r\n    '0x61': 'BSC Testnet',\r\n    '0x38': 'BSC Mainnet',\r\n    '0x89': 'Polygon Mainnet',\r\n    '0x13881': 'Polygon Mumbai Testnet',\r\n    '0xa86a': 'AVAX Mainnet',\r\n  }\r\n  \r\n  export { networks }","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport WebGL from './WebGL';\r\nimport EthStuff from './EthStuff'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <EthStuff />\r\n    <WebGL />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}